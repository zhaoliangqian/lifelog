1：
docker容器中的网络和宿主机的网络无法双向通信问题
    目前有2种解决方案：容器的子网和宿主机子网一致、采用集群管理工具k8s
    由于当前版本切换k8s需要一定的时间，暂时不采用k8s，后期尝试接入，本期采用前者方案；
    后期接入k8s主要参考方案：360的开源项目wayne，
	https://www.kubernetes.org.cn/4872.html
	https://github.com/kubernetes-client/java

2:
docker命令：
	docker registry启动命令：docker run -d -p 5000:5000 -v `pwd`/data:/var/lib/registry --restart=always --name registry:latest
	docker ssl: 
	openssl req -newkey rsa:2048 -nodes -sha256 -keyout certs/domain.key -x509 -days 365 -out certs/domain.crt
	docker run -d -p 5000:5000 --restart=always --name registry \
	  -v `pwd`/data:/var/lib/registry \
	  -v `pwd`/certs:/certs \
	  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
	  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
	  registry:2
	docker daemon 监听端口
	ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375
	创建swarm网络
	swarm（docker1.12以后支持的集群管理工具）实现Overlay模式
	具体步骤： 
	1 启动swarm集群
		管理节点：docker swarm init --advertise-addr <MANAGER1-IP>
		普通节点：docker swarm join --token
	2 创建Overlay网络
		docker network create --driver=overlay --attachable attachable-overlay	
	3 docker中容器加入到overlay网络中
		docker run --net=attachable-overlay

3：
持续集成系统增加功能：docker部署后，能够查看环境内的部署信息; 

4-7：
假期游玩；

8: 
	判断一个linux机器是否是vm：
dmidecode -s system-product-name
	nginx应用和zookeeper应用的查看问题；
简化处理，在数据库中默认配置nginx和zookeeper的应用；
insert into fci_app(app_id, app_name,  app_deploy_name, app_deploy_desc, project_id, status, priority,  docker_image, adder_name, add_time, updater_name, update_time)
values (1, 'nginx', 'nginx', 'nginx server', 0, 1, 0,  'djl_nginx:29', 'system', NOW(), 'system', NOW());
insert into fci_app(app_id, app_name,  app_deploy_name, app_deploy_desc, project_id, status, priority,  docker_image, adder_name, add_time, updater_name, update_time)
values (2, 'zookeeper', 'zookeeper', 'zookeeper server', 0, 1, 0,  '3.4', 'system', NOW(), 'system', NOW());
	linux df命令输出不换行： 
http://www.361way.com/df/58.html
	ip route show可以查看机器的网关
9: 
	docker环境释放后，ip释放问题：
	部署页面重新设计； 
	mic编程规范培训； 
10: 
	《spring源码深度解析》p48
	金字塔原理——规划2019
	fci项目选择部署时，只能选择空闲环境，正在使用环境不能部署； 
	docker的cmd和entrypoint： cmd是容器启动默认的参数 entrypoint用于指定容器启动是执行的命令，2这联合使用可以理解为 "entrypoint中指定的命令" "cmd中的参数"
	zk容器启动会一直运行，是由于cmd中的参数为zkServer.sh start-foreground服务以前台启动，从而实现容器不关闭； 
11：
	《spring源码深度解析》p60
	zookeeper自动启动； 
	sian自动构建镜像； 
	周例会
12：
	《spring源码深度解析》p100
	sian镜像制作
15： 
mysql的引擎：innodb 和 myisam
	事务：前者支持； 后者不支持； 
	索引：都是b+树，但是前世是聚集索引，后者是非聚集索引；
	行锁：前者支持，后者不支持； 
	更新操作前者更快，由于行锁，尤其在并发条件下； 
16：
sian镜像制作成功、部署成功； 
jvm过完； 
17： 
docker容器想要指定hosts不能再镜像中修改/etc/hosts 需要通过--add-host命令指定
mysql的innodb和myisam比较：innodb支持事务、innodb的主键默认采用聚集索引，其他索引通过和主键索引关联，所以总的来说都是聚集索引myisam采用非聚集索引，聚集索引的优势在于，对于主键的范围查找，其读取的数据有效率更高，io次数相对减少；myisam记录了表的总的数量，因此count操作更加快；innodb由于采用行锁，因此其更新操作更高效相对于myisam的表锁； 
mysql的常见问题：
http://www.cnblogs.com/crazylqy/p/7611069.html ：图解innodb引擎死锁原理； 
https://blog.csdn.net/forezp/article/details/89167125
https://dba.stackexchange.com/questions/37187/why-does-that-query-cause-lock-wait-timeouts
tcpdump 命令使用介绍：
https://blog.csdn.net/gh201030460222/article/details/80573526
https://blog.csdn.net/zhuxineli/article/details/14455029
18-22：
容器内无法使用jinfo等命令查看jvm原因：
	ptrace被关闭了： https://www.cnblogs.com/tangr206/articles/3094358.html
	fix:https://blog.csdn.net/kinginblue/article/details/78078028
常用mq中间件的使用与比较（kafka，rabbitMq，activeMq）
	kafka吞吐量更佳，rabbitmq和activemq支持事务。根据自己的业务情况，选择合适的MQ，
	这里记录下《kafka权威指南》的阅读笔记
	第一章节：
		为啥选择kafka：
			多个消费者，kafka不同于其他的消息系统，它可以支持不同的消费者组，他们可以消费同一个消息； 
			基于磁盘：持久化；
			伸缩性：支持broker的扩容； 
			高性能：kafka支持亚秒级别的延时；
		使用场景：
			用户活动跟踪；
			日志记录； 
			提交日志； 
			流处理；
			消息传递； 
	第二章节：
		依赖zk，zk保存了broker的元数据，zookeeper.connect=zkhost:zkport/chroot 其中path（chroot）如果不存在会自动创建该路径； 
		分区数量的选择：根据吞吐量、实际机器的网络、磁盘io速度确定；	kafka的消费者会使用页面缓存技术，缓存部分磁盘上的消息，较少等待磁盘io时间，因此kafka最好单独部署，减少和其他应用的共享页面缓存； 
linuxx学习：http://c.biancheng.net/linux_tutorial/
		
常用缓存中间件的使用与比较（redis、memchache）
b树：https://www.jianshu.com/p/db226e0196b4
二叉树、红黑树、图论；